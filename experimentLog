2019年11月11日

Ubuntu 16 编译内核4.0.0成功，但装载后无法启动
内核4.17相比4.0变化太大
使用4.0.9，没有变化，且可以正确编译启动，但是鼠标会有些飘，可能内核4.x存在一些内部的问题
以后可以找找看能够兼容的最高版本号

---------------------------------------------------------------------------------------

编译内核：
sudo su
make mrproper
make clean
make menuconfig

make -j4
make modules_install
make install

---------------------------------------------------------------------------------------

kvm在宿主机中只是作为一个进程，它的多个vcup是作为线程被使用，因此其地址空间只有一个pte映射

----------------------------------------------------------------------------------------

使用docker测试一下

-----------------------------------------------------------------------------------------

/sys/kernel/mm/ksm/
/var/log/syslog

--------------------------------------------------------------------------------------

docker run --name my_nginx2 -d -p 8080:8088 -v ~/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro nginx

nginx 不太行啊 -> 用ab做一下压力测试

----------------------------------------------------------------------------------

redis是单进程单线程内存数据库，不行

-------------------------------------------------------------------------------------

elasticsearch基于filecache，不是匿名页面

------------------------------------------------------------------------------------
2019年12月16日 13点36分

测试pytorch dataloader
感觉可以，从windows来看应该确实是多线程读取
只不过需要先把数据集读到内存里再对内存数组进行loader封装，涉及两个问题：
1、python的list变量是否是分配了匿名页存储
2、loader是否共享映射（虽然python3-multiprocess的文档说是利用fork调用，但是其中细节并不了解）

----------------------------------------------------------------------------------------------------------------------
数据集记录

https://www.cnblogs.com/lifuyun/p/lifuyun2019060601.html NPL数据集
https://blog.csdn.net/qq_25819827/article/details/79048068 CV数据集


train-images.idx3-ubyte 和 train-labels.idx1-ubyte 来自 http://yann.lecun.com/exdb/mnist/ 手写字体图像识别数据集
training-parallel.tgz 来自 http://statmt.org/wmt11/translation-task.html#download 欧洲语言npl数据集

---------------------------------------------------------------------------------------------------------------------------------
2019年12月18日 12点26分

设计思路需要转变，之前钻牛角尖了，学长的设计还是妙啊
找工作集困难 -> 多进程共享内存（fork）少 -> 反向映射机制意义不大
但是我们的目的没有变：减少无用的操作，让每一次pte重定向都能够真实地释放物理页
所以即使有反向映射机制，优先级也应该是这样的：
只被单个pte映射的物理页 > 被多个pte映射的物理页 > 根本不存在的物理页（虚拟页扫描）

-------------------------------------------------------------------------------------------------------------------------------------------
虽然在写的时候把所有的ksm都改名成了pksm，
但是为了makefile和其他文件include方便（懒得一个个改了），
在放到项目里实际编译的时候还是要叫ksm

----------------------------------------------------------------------------------------------------
设置CONFIG_MEMORY_HOTREMOVE编译宏：
Processor type and feature -> *A*llow for memory hot remove

CONFIG_NUMA
Processor type and feature -> N*u*ma Memory Allocation and Scheduler Support

------------------------------------------------------------------------------------------------
mm/memory.c
    wp_page_copy
    do_anonymous_page
    do_cow_fault // 这个东西是对file cache用的 !vma_is_anonymous() -> do_fault() -> do_cow_fault()
mm/pksm.c
mm/page_alloc.c
    free_hot_cold_page
    #include <linux/ksm.h>   
include/linux/pksm.h
kernel/fork.c
    __mmput
include/asm-generic/pgtable.h
    is_zero_pfn

--------------------------------------------------------------------------------------------------------------------

redis-benchmark -h 127.0.0.1 -p 6379 -n 100000000 script load "redis.call('LPUSH', 'list1', 'xxxxxx')"
redis-benchmark -h 127.0.0.1 -p 6379 -t lpush -n 100000000
sudo apt-get install redis-server



docker run -it -d -p 80:80  --name datahttpd -v /home/linux/website/:/usr/local/apache2/htdocs/ httpd



docker run --name my_nginx2 -d -p 82:80 -v /home/linux/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /home/linux/nginx/log:/var/log/nginx -v /home/linux/nginx/html:/usr/share/nginx/html nginx

docker run -d -v /home/linux/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /home/linux/nginx/log:/var/log/nginx -v /home/linux/nginx/html:/usr/share/nginx/html nginx


httperf --client=0/1 --server 127.0.0.1 --port 80 --uri /index.html --rate 100 --num-conn 500 --num-call 5 --timeout 5 
httperf --server 127.0.0.1 --port 80 --num-conns 20000 --rate 100 --timeout 2

docker stop $(docker ps -aq)

----------------------------------------------------------------------------------------------------------------------------------------
native_queued_spin_lock_slowpath 占cpu开销大

break_cow rmap_walk_ksm


------------------------------------------------------------

先确定 break_cow 触发的原因

再考虑解决：
    1、仿照ksm
    2、直接不处理

---------------------------------------------------------------

CONFIG_DEBUG_LOCKDEP

---------------------------------------------------------------
在华为云的arm服务器上编译
4.2 4.4 4.7不行

4.14 4.15 4.17 4.20.9可行

make ARCH_ENABLE_MEMORY_HOTPLUG=n -j2
---------------------------------------------------------------

4.2 -> 4.14

rmap_walk从返回int（RMAP系列宏）变为返回void
    可能是由于觉得没必要通过反向遍历的过程来指示结果成功与否
    结果是否成功通过遍历的效果就能判断（更直接）

rmap_one也从返回int（RMAP系列宏）变为返回bool
    反向映射的遍历过程中不使用这么多状态
    返回true表示操作成功，继续
    返回false表示操作失败，停止

---------------------------------------------------------------
sudo apt-get install gcc-aarch64-linux-gnu

编译busuBox
export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-gnu-
#make menuconfig #P684，进行配置
make -j24 install

mkdir etc
mkdir dev
mkdir mnt
mkdir -p etc/init.d

创建 _install/etc/init.d/rcS
mkdir -p /proc
mkdir -p /tmp
mkdir -p /sys
mkdir -p /mnt
/bin/mount -a
mkdir -p /dev/pts
mount -t devpts devpts /dev/pts
echo /sbin/mdev > /proc/sys/kernel/hotplug
mdev -s

chmod +x _install/etc/init.d/rcS

创建 _install/etc/fstab
proc /proc proc defaults 0 0
tmpfs /tmp tmpfs defaults 0 0
sysfs /sys sysfs defaults 0 0
tmpfs /dev tmpfs defaults 0 0
debugfs /sys/kernel/debug debugfs defaults 0 0

创建 _install/etc/inittab
::sysinit:/etc/init.d/rcS
::respawn:-/bin/sh
::askfirst:-/bin/sh
::ctrlaltdel:/bin/umount -a -r

进入 _install/dev
sudo mknod console c 5 1
sudo mknod null c 1 3

编译内核
export ARCH=arm64
export CROSS_COMPILE=aarch64-linux-gnu-
#make vexpress_defconfig

make bzImage -j24 ARCH=arm CROSS_COMPILE=arm-linux-gnueabi-
make dtbs

qemu-system-arm -M vexpress-a9 -smp 4 -m 1024M -kernel arch/arm/boot/zImage -append "rdinit=/linuxrc console=ttyAMA0 loglevel=8" -dtb arch/arm/boot/dts/vexpress-v2p-ca9.dtb -nographic
qemu-system-aarch64 -machine virt -cpu cortex-a57 -machine type=virt -nographic -m 2048 -smp 2 -kernel arch/arm64/boot/Image --append "rdinit=/linuxrc console=ttyAMA0"
qemu-system-aarch64 -machine virt -cpu cortex-a57 -machine type=virt -nographic -m 2048 -smp 2 -kernel arch/arm64/boot/Image --append “rdinit=/linuxrc console=ttyAMA0”


------------------------------------------------------------------------------
sudo ./qemu-1.7.0/arm-softmmu/qemu-system-arm  -M vexpress-a9 -kernel ./linux-3.10.28/arch/arm/boot/zImage -sd rootfs.img --append "root=/dev/mmcblk0 rw rootfs=ext3 rootdelay=3  physmap.enabled=0 console=ttyAMA0 console=tty0 kgdboc=tty0,115200 kgdbwait"  -net nic,vlan=0 -net tap,vlan=0  -serial tcp::4321,server

qemu-system-aarch64 -m 8192 -cpu cortex-a57 -smp 4 -M virt -bios QEMU_EFI.fd -nographic -drive if=none,file=ubuntu16.04-arm64.img,id=hd0 -device virtio-blk-device,drive=hd0 -s

-------------------------------------------------------------------------------------
按照《奔跑吧Linux内核》的方法搭建 qemu+gdb  成功，但是只能运行最小系统，没有上层环境，难以复现问题（相当于静态内核）
想要qemu+gdb运行Ubuntu，尝试qemu虚拟机运行aarch64的Ubuntu，失败

尝试kgdb，通过网络或串口等等
kvm不能直接连串口，qemu怎么设置tty不懂
最后的方法是在服务器上运行vmware

-------------------------------------------------------------------------------------
//建议打开的选项
(1)CONFIG_DEBUG_INFO = y 该选项可以使得编译的内核包含一些调试信息，使得调试更容易。
位置:---->Kernel hacking
   ---->Compile-time checks and compiler options
   ---->Compile the kernel with debug info
(2)CONFIG_FRAME_POINTER = y 该选项将使得内核使用帧指针寄存器来维护堆栈，从而就可以正确地执行堆栈回溯，即函数调用栈信息。
位置:---->Kernel hacking
   ---->Compile-time checks and compiler options
   ---->Compile the kernel with frame pointers
(3)CONFIG_MAGIC_SYSRQ = y (如果你选择了KGDB_SERIAL_CONSOLE,这个选项将自动被选上) 激活"魔术 SysRq"键. 该选项对kgdboc调试非常有用，kgdb向其注册了‘g’魔术键来激活kgdb 。  
位置:---->Kernel hacking
   ---->Magic SysRq key
当你想手动激活kgdb时，你可以触发SysRq的g键, 如:
$ echo"g">/proc/sysrq-trigger

//建议关闭的选项
(4)CONFIG_DEBUG_RODATA = n 该选项是将内核的一些内存区域空间设置为只读，这样可能导致kgdb的设置软断点功能失效。所以推荐将该选项关闭。  
位置:---->Kernel hacking
   ---->Write protect kernel read-only data structures
(5)CONFIG_DEBUG_SET_MODULE_RONX =n,该选项会将内核模块空间设置为只读，这样会导致调试内核模块时设置断点功能失效，设置断点时出现以下错误，(调试内核模块时吃过亏又重新编译的内核)所以将其关闭。
Cannot insert breakpoint 1.
Error accessing memory address 0xf90f6000: Unknown error -1.
位置：---->Kernel hacking
   ---->Set loadable kernel module data as NX and test as RO.
  
//必须使能的选项
(5)CONFIG_KGDB = y  
位置:---->Kernel hacking    
     ---->KGDB: kernel debugger
(6)CONFIG_KGDB_SERIAL_CONSOLE = y 使KGDB使用串口进行通信。
位置:---->Kernel hacking     
     ---->KGDB: kernel debugger              
     ---->KGDB: use kgdb over the serial console
(7)其余：
在Kernel hacking-->KGDB: kernel debugger目录下，除了KGDB：internal test suite外的选项全部使能y。

-------------------------------------------------------------------------------------
sudo vim /etc/default/grub
GRUB_CMDLINE_LINUX="rodata=off nokaslr kgdboc=ttyS0,115200"
sudo update-grub

target:
    echo g > /proc/sysrq-trigger

host:
    gdb ./vmlinux
    target remote /dev/ttyS0
    handle SIGSEGV noprint nostop pass
    break sys_clone
    c
    s

-------------------------------------------------------------------------------------
sudo vmrun stop "vmware/Target/Target.vmx" hard
sudo vmrun -T ws start "/home/as-admin/vmware/Target/Target.vmx" nogui
sudo docker container prune

-------------------------------------------------------------------------------------
用
error position ->
在syslog中指示错误位置

开机指令：
    Apr 26 18:48:05 ubuntu rsyslogd: [origin software="rsyslogd" swVersion="8.16.0" x-pid="787" x-info="http://www.rsyslog.com"] start

错误提示：
    Apr 26 18:41:36 ubuntu kernel: [  228.035535] watchdog: BUG: soft lockup - CPU#0 stuck for 22s! [GC Thread#3:3765]
    Apr 26 18:41:36 ubuntu kernel: [  228.036267] Modules linked in: veth nf_conntrack_netlink nfnetlink xfrm_user xfrm_algo xt_addrtype br_netfilter xt_CHECKSUM iptable_mangle ipt_MASQUERADE nf_nat_masquerade_ipv4 iptable_nat nf_nat_ipv4 nf_nat nf_conntrack_ipv4 nf_defrag_ipv4 xt_conntrack nf_conntrack libcrc32c ipt_REJECT nf_reject_ipv4 xt_tcpudp rfcomm bridge stp llc ebtable_filter ebtables ip6table_filter ip6_tables iptable_filter ip_tables x_tables overlay bnep btusb btrtl btbcm btintel bluetooth crct10dif_pclmul crc32_pclmul snd_ens1371 ghash_clmulni_intel cryptd vmw_balloon snd_ac97_codec input_leds joydev intel_rapl_perf serio_raw gameport ecdh_generic ac97_bus nfit snd_pcm snd_seq_midi snd_seq_midi_event snd_rawmidi snd_seq snd_seq_device snd_timer snd kvm_intel mac_hid kvm soundcore irqbypass i2c_piix4 vmw_vsock_vmci_transport
    Apr 26 18:41:36 ubuntu kernel: [  228.036298]  shpchp vsock binfmt_misc vmw_vmci parport_pc ppdev lp parport autofs4 vmwgfx hid_generic usbhid ttm hid drm_kms_helper syscopyarea sysfillrect sysimgblt fb_sys_fops drm mptspi psmouse ahci mptscsih libahci mptbase pata_acpi e1000 scsi_transport_spi
    Apr 26 18:41:36 ubuntu kernel: [  228.036312] CPU: 0 PID: 3765 Comm: GC Thread#3 Not tainted 4.14.0 #1
    Apr 26 18:41:36 ubuntu kernel: [  228.036313] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/29/2019
    Apr 26 18:41:36 ubuntu kernel: [  228.036314] task: ffffa0d3aa3b1600 task.stack: ffffb8c741c20000
    Apr 26 18:41:36 ubuntu kernel: [  228.036325] RIP: 0010:native_queued_spin_lock_slowpath+0x25/0x1a0
    Apr 26 18:41:36 ubuntu kernel: [  228.036326] RSP: 0000:ffffb8c741c23da0 EFLAGS: 00000202 ORIG_RAX: ffffffffffffff10
    Apr 26 18:41:36 ubuntu kernel: [  228.036327] RAX: 0000000000000001 RBX: 0000000000000000 RCX: ffffffffffffffff
    Apr 26 18:41:36 ubuntu kernel: [  228.036327] RDX: 0000000000000001 RSI: 0000000000000001 RDI: ffffe8e408a424f0
    Apr 26 18:41:36 ubuntu kernel: [  228.036328] RBP: ffffb8c741c23da0 R08: ffffa0d3ad517a40 R09: 00000000021e2650
    Apr 26 18:41:36 ubuntu kernel: [  228.036328] R10: 0000000000015afc R11: 0000000000000206 R12: ffffa0d3ad517a40
    Apr 26 18:41:36 ubuntu kernel: [  228.036329] R13: ffffa0d180000568 R14: ffffb8c741c23dd8 R15: 0000000000000001
    Apr 26 18:41:36 ubuntu kernel: [  228.036330] FS:  00007f16e79e6700(0000) GS:ffffa0d3b5600000(0000) knlGS:0000000000000000
    Apr 26 18:41:36 ubuntu kernel: [  228.036331] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    Apr 26 18:41:36 ubuntu kernel: [  228.036331] CR2: 00000000d5a48ff0 CR3: 0000000230240002 CR4: 00000000003606f0
    Apr 26 18:41:36 ubuntu kernel: [  228.036363] Call Trace:
    Apr 26 18:41:36 ubuntu kernel: [  228.036367]  _raw_spin_lock+0x20/0x30
    Apr 26 18:41:36 ubuntu kernel: [  228.036370]  __handle_mm_fault+0x625/0xf90
    Apr 26 18:41:36 ubuntu kernel: [  228.036372]  ? set_next_entity+0xcb/0x1f0
    Apr 26 18:41:36 ubuntu kernel: [  228.036373]  handle_mm_fault+0xcc/0x1c0
    Apr 26 18:41:36 ubuntu kernel: [  228.036374]  __do_page_fault+0x262/0x4f0
    Apr 26 18:41:36 ubuntu kernel: [  228.036376]  do_page_fault+0x2e/0xe0
    Apr 26 18:41:36 ubuntu kernel: [  228.036377]  page_fault+0x22/0x30
    Apr 26 18:41:36 ubuntu kernel: [  228.036378] RIP: 0033:0x7f1744100b4b
    Apr 26 18:41:36 ubuntu kernel: [  228.036379] RSP: 002b:00007f16e79e4658 EFLAGS: 00010206
    Apr 26 18:41:36 ubuntu kernel: [  228.036379] RAX: 00000000d59a85e0 RBX: 00000000d59a85d0 RCX: 00000000000ad7d0
    Apr 26 18:41:36 ubuntu kernel: [  228.036380] RDX: 00000000000a0950 RSI: 00000000d38669e0 RDI: 00000000d5a49030
    Apr 26 18:41:36 ubuntu kernel: [  228.036380] RBP: 00007f16e79e46b0 R08: 00000000d5a55da0 R09: 00000000021e2650
    Apr 26 18:41:36 ubuntu kernel: [  228.036381] R10: 0000000000015afc R11: 0000000000000206 R12: 00007f1743f51384
    Apr 26 18:41:36 ubuntu kernel: [  228.036381] R13: 0000000000000001 R14: 00000000d37c5f80 R15: 0000000000015afc
    Apr 26 18:41:36 ubuntu kernel: [  228.036382] Code: 84 00 00 00 00 00 0f 1f 44 00 00 55 48 89 e5 0f 1f 44 00 00 ba 01 00 00 00 8b 07 85 c0 75 0a f0 0f b1 17 85 c0 75 f2 5d c3 f3 90 <eb> ec 81 fe 00 01 00 00 0f 84 92 00 00 00 41 b8 01 01 00 00 b9 

-------------------------------------------------------------------------------------
可通过运行命令echo "0" >/proc/sys/kernel/sysrq和echo "1" >/proc/sys/kernel/sysrq暂时启用或禁用SysRq. 
如果需要永久启用或者禁用SysRqs, 则可在/etc/sysctl.conf中设置kernel.sysrq = 1 (启用SsyRq)或kernel.sysrq = 0 (禁用SysRq) 

sudo vi /etc/hdparm.conf
Uncomment the line “#write_cache = off” (without quotes) by removing the # at its beginning. So it looks like:
# -W Disable/enable the IDE drive’s write-caching feature
write_cache = off

-------------------------------------------------------------------------------------

为什么rmap_item要记录anon_vma而不是vma
    因为anon_vma设计的目的就是为了在反向映射时，为下层的物理页提供上层虚拟空间的抽象
    因为上层虚拟空间（vma）常变，让下层指向它会造成问题，所以使用不常变的anon_vma作为抽象
    pksm中的rmap同理

为什么rmap_item要记录address
    首先要明确vma+address是虚拟页面的表示方式（类似于物理页面和page结构的关系）
    因此这里记录address就是相当于记录虚拟页面
    通过anon_vma可以获得和这个anon_vma有关的所有vma，配合上address就可以获得所有虚拟页面

        为什么这个页面在所有的进程地址空间里有相同的address？
            一个rmap_item对应一个进程地址空间中的一个虚拟页面，所以不会发生冲突
            rmap_item已经唯一确认一个虚拟页面，对应一个vma和一个address，后者直接记录，前者通过anon_vma的红黑树得到

                为什么anon_vma的红黑树就一定可以获得对应的vma？有可能有多个vma啊，而且简单地通过address是否在vma区间内不能完全分辨

anon_vma包含多个页面的虚拟地址空间

-------------------------------------------------------------------------------------
page_ref_count(page_slot->physical_page) page_ref.h
page_mapcount(page_slot->physical_page) mm.h
May  4 19:49:38 ubuntu kernel: [  134.916562] PKSM : cur_page: ffffea000f0fb540 count: 3 mapcount: 2 mapping: ffff8803d7b0d0b1, hash: 31900333

page_count = &compound_head(page)->_refcount page_ref.h

-------------------------------------------------------------------------------------
使用perf lock 要设置lock_stat首先

-------------------------------------------------------------------------------------
docker stop $(docker ps -aq)

-------------------------------------------------------------------------------------
KBUILD_CFLAGS 设置内核编译等级
linux/compiler.h linux/compiler-gcc.h 函数修饰符宏

-------------------------------------------------------------------------------------
1、根据pksm_page聚类
    第一次归并到一起的page，在其中发生了cow之后，仍然有更大概率（？）可以归并

2、归并发生后，在对应的地方，连续地址空间左右扩展

3、对文件page_cache的支持

-------------------------------------------------------------------------------------
CONFIG_PREEMPT


-------------------------------------------------------------------------------------
python .\draw_cpu_line_accu.py '..\log\5-29-2(10elastic_anon)\out_cpu_usage.log' '..\log\6-6-5(10elastic_uksm_pree)\out_cpu_usage.log' '..\log\6-6-4(10elastic_uksmzero_assem)\out_cpu_usage.log' '..\log\5-30-1(10elastic_uksm)\out_cpu_usage.log' '..\log\6-29-1(4000)\out_cpu_usage.log' '..\log\6-29-2(1000000)\out_cpu_usage.log'

python .\draw_mem_line.py '..\log\5-29-1(10elastic_plain)\out_mem_usage.log' '..\log\6-6-5(10elastic_uksm_pree)\out_mem_usage.log' '..\log\6-6-4(10elastic_uksmzero_assem)\out_mem_usage.log' '..\log\5-30-1(10elastic_uksm)\out_mem_usage.log' '..\log\6-29-1(4000)\out_mem_usage.log' '..\log\6-29-2(1000000)\out_mem_usage.log'

-------------------------------------------------------------------------------------

This option reduces the latency of the kernel by making                                                                                                                         │
  │ all kernel code (that is not executing in a critical section)                                                                                                                   │
  │ preemptible.  This allows reaction to interactive events by                                                                                                                     │
  │ permitting a low priority process to be preempted involuntarily                                                                                                                 │
  │ even if it is in kernel mode executing a system call and would                                                                                                                  │
  │ otherwise not be about to reach a natural preemption point.                                                                                                                     │
  │ This allows applications to run more 'smoothly' even when the                                                                                                                   │
  │ system is under load, at the cost of slightly lower throughput                                                                                                                  │
  │ and a slight runtime overhead to kernel code.  


-------------------------------------------------------------------------------------
sudo apt-get install qemu-kvm
sudo apt-get install qemu
sudo apt-get install virt-manager
sudo apt-get install virt-viewer
sudo apt-get install libvirt-bin

sudo apt-get install bridge-utils

-------------------------------------------------------------------------------------
sudo virt-clone -o test0 -n test3 --auto-clone &&
sudo virt-clone -o test0 -n test4 --auto-clone &&
sudo virt-clone -o test0 -n test5 --auto-clone &&
sudo virt-clone -o test0 -n test6 --auto-clone
&& 

-------------------------------------------------------------------------------------
find . -type f | while read x; do echo "${x} = $(cat ${x})"; done

-------------------------------------------------------------------------------------
perf record

-------------------------------------------------------------------------------------
很多变量比如 panic watchdog_thresh softlockup_all_cpu_backtrace都可以通过以下两种方式修改：
    1、/proc/sys/kernel/xxxxxx
    2、/etc/sysctl.conf kernel.xxxxxx

-------------------------------------------------------------------------------------
https://www.cnblogs.com/lshs/p/6038935.html
既然没有配置DEBUG_INFO时候编译的内核可以kdump，配置DEBUG_INFO后编译的内核反而不能kdump，那么在安装尝试把DEBUG信息去掉

objcopy --strip-debug ./vmlinux.o  （建议先备份vmlinux.o）

make  modules_install INSTALL_MOD_STRIP=1 install

make -j8 && make modules_install && make install &&
cp ./vmlinux.o ./vmlinux.o.ori &&
objcopy --strip-debug ./vmlinux.o && make  modules_install INSTALL_MOD_STRIP=1 install

make -j8 &&
cp ./vmlinux.o ./vmlinux.o.ori && objcopy --strip-debug ./vmlinux.o && 
make  modules_install INSTALL_MOD_STRIP=1 install

-------------------------------------------------------------------------------------
make menuconfig时无法删除填入的数值，就按着Ctrl+<--（ctrl加退格键 即可删除）

-------------------------------------------------------------------------------------
.\venv\Scripts\activate

虚拟环境¶
建议在开发环境和生产环境下都使用虚拟环境来管理项目的依赖。

为什么要使用虚拟环境？随着你的 Python 项目越来越多，你会发现不同的项目会需要 不同的版本的 Python 库。同一个 Python 库的不同版本可能不兼容。

虚拟环境可以为每一个项目安装独立的 Python 库，这样就可以隔离不同项目之间的 Python 库，也可以隔离项目与操作系统之间的 Python 库。

Python 3 内置了用于创建虚拟环境的 venv 模块。如果你使用的是较新的 Python 版本，那么请接着阅读本文下面的内容。

如果你使用 Python 2 ，请首先参阅 安装 virtualenv 。

创建一个虚拟环境
创建一个项目文件夹，然后创建一个虚拟环境。创建完成后项目文件夹中会有一个 venv 文件夹：

$ mkdir myproject
$ cd myproject
$ python3 -m venv venv
在 Windows 下：

$ py -3 -m venv venv
在老版本的 Python 中要使用下面的命令创建虚拟环境：

$ python2 -m virtualenv venv
在 Windows 下：

> \Python27\Scripts\virtualenv.exe venv
激活虚拟环境
在开始工作前，先要激活相应的虚拟环境：

$ . venv/bin/activate
在 Windows 下：

> venv\Scripts\activate
激活后，你的终端提示符会显示虚拟环境的名称。

-------------------------------------------------------------------------------------
export BERT_BASE_DIR=/home/l/workload/bert/bert/pre_model/uncased_L-12_H-768_A-12
export SQUAD_DIR=/home/l/workload/bert/bert/dataset/SQuAD_1_1

python run_squad.py \
  --vocab_file=$BERT_BASE_DIR/vocab.txt \
  --bert_config_file=$BERT_BASE_DIR/bert_config.json \
  --init_checkpoint=$BERT_BASE_DIR/bert_model.ckpt \
  --do_train=True \
  --train_file=$SQUAD_DIR/train-v1.1.json \
  --do_predict=True \
  --predict_file=$SQUAD_DIR/dev-v1.1.json \
  --train_batch_size=24 \
  --learning_rate=3e-5 \
  --num_train_epochs=2.0 \
  --max_seq_length=384 \
  --doc_stride=128 \
  --output_dir=/tmp/squad_base/


-------------------------------------------------------------------------------------
  838  mkdir systemtap
  839  mkdir elfutils
  840  cd systemtap/
  841  wget https://sourceware.org/systemtap/ftp/releases/systemtap-4.3.tar.gz
  842  ls
  843  tar -xvf systemtap-4.3.tar.gz
  844  ls
  845  cd systemtap-4.3/
  846  ls
  847  cd ../../elfutils/
  848  wget https://sourceware.org/elfutils/ftp/0.180/elfutils-0.180.tar.bz2
  849  tar -xvf elfutils-0.180.tar.bz2
  850  ls
  851  cd elfutils-0.180/
  852  ls
  853  cd ../../systemtap/systemtap-4.3/
  854  ./configure --help
  855  sudo su

 1004  ./configure  --with-elfutils=/home/l/elfutils/elfutils-0.180
 1005  ./configure  '--with-elfutils=/home/l/elfutils/elfutils-0.180' python='/usr/bin/python2' pyexecdir='${exec_prefix}/lib/python2.7/dist-packages' python3='/usr/bin/python3' py3execdir='${exec_prefix}/lib/python3.5/site-packages' --prefix=/root/systemtap-4.3-4390
 1006  make
 1007  make -j8
 1008  python -v
 1009  python -V
 1010  python setup.py build
 1011  sudo apt-get install python-setuptools
 1012  make -j8
 1013  make install
 1014  stap -ve 'probe begin { log("hello world") exit() }'
 1015  reboot
 1016  history
 1017  cd /root/systemtap-4.3-4390/
 1018  ls
 1019  cd bin/
 1020  ls
 1021  ./stap -ve 'probe begin { log("hello world") exit() }'
 1022  pwd
 1023  vim /etc/profile
 1024  vim /etc/environment
 1025  reboot
 1026  stap -ve 'probe begin { log("hello world") exit() }'
 1027  stap -h

