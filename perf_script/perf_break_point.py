# perf script event handlers, generated by perf script -g python
# Licensed under the terms of the GNU GPL License version 2

# The common_* event handler fields are the most useful fields common to
# all events.  They don't necessarily correspond to the 'common_*' fields
# in the format files.  Those fields not available as handler params can
# be retrieved using Python functions of the form common_*(context).
# See the perf-script-python Documentation for the list of available functions.

import os
import sys

sys.path.append(os.environ['PERF_EXEC_PATH'] + \
	'/scripts/python/Perf-Trace-Util/lib/Perf/Trace')

from perf_trace_context import *
from Core import *
from Util import *

group_name_dict = {0:'pksm_do_scan', 1:'__pksm_exit', 2:'get_page_slot'}

time_total_dict = autodict()
count_total_dict = autodict()
prev_timestamp_dict = autodict()

group_list = []
point_list = autodict()

first_timestamp = -1
last_timestamp = -1

def add_to_dict(dict_name, dict_value, *dict_indices):
	if len(dict_indices) == 1:
		try:
			dict_name[dict_indices[0]] += dict_value
		except TypeError:
			dict_name[dict_indices[0]] = dict_value
	elif len(dict_indices) == 2:
		try:
			dict_name[dict_indices[0]][dict_indices[1]] += dict_value
		except TypeError:
			dict_name[dict_indices[0]][dict_indices[1]] = dict_value
	elif len(dict_indices) == 3:
		try:
			dict_name[dict_indices[0]][dict_indices[1]][dict_indices[2]] += dict_value
		except TypeError:
			dict_name[dict_indices[0]][dict_indices[1]][dict_indices[2]] = dict_value

def get_from_dict(dict_name, *dict_indices):
	result = -1
	if len(dict_indices) == 1:
		try:
			result = dict_name[dict_indices[0]]
		except TypeError:
			result = -1
	elif len(dict_indices) == 2:
		try:
			result = dict_name[dict_indices[0]][dict_indices[1]]
		except TypeError:
			result = -1
	elif len(dict_indices) == 3:
		try:
			result = dict_name[dict_indices[0]][dict_indices[1]][dict_indices[2]]
		except TypeError:
			result = -1
	if isinstance(result, defaultdict):
		result = -1
	return result

def set_in_dict(dict_name, dict_value, *dict_indices):
	if len(dict_indices) == 1:
		dict_name[dict_indices[0]] = dict_value
	elif len(dict_indices) == 2:
		dict_name[dict_indices[0]][dict_indices[1]] = dict_value
	elif len(dict_indices) == 3:
		dict_name[dict_indices[0]][dict_indices[1]][dict_indices[2]] = dict_value


def trace_begin():
	print "in trace_begin"

def trace_end():
	print "in trace_end"

	group_list.sort()
	print(group_list)
	for g in group_list:
		point_list[g].sort()
		print(point_list[g])
	total_nsec_last = last_timestamp-first_timestamp
	total_sec_last = (float)(last_timestamp-first_timestamp)/(10**9)
	print "total_time last: %15d sec, %15d nsec" % (total_sec_last, total_nsec_last)

	for g in group_list:
		print "========================================================================================================================================================="
		print "in %s:" % (group_name_dict[g] if g in group_name_dict else 'unknown')
		for p in point_list[g]:
			cur_time = get_from_dict(time_total_dict, g, p)
			cur_count = get_from_dict(count_total_dict, g, p)

			if p == 0:
				avg_nsec = 0
			else:
				if cur_time < 0 or cur_count < 0:
					print "err in g: %d, p: %d, cur_time: %d, cur_count: %d" % (g, p, cur_time, cur_count)
				avg_nsec = avg(cur_time, cur_count)

			# avg_msec = str(avg_nsec/(10 ** 6)) + "." +  str(avg_nsec%(10 ** 6))
			avg_nsec_str = "%14u"%(avg_nsec)
			avg_msec_str = "%8u.%06u"%(avg_nsec/(10 ** 6),avg_nsec%(10 ** 6))
			avg_sec_str = "%5u.%09u"%(avg_nsec/(10 ** 9),avg_nsec%(10 ** 9))
			print "g: %d\tp: %d\tnsec: %s\tmsec: %s\tsec: %s\ttime: %15d\tcount: %9d\tfreq_sec: %8d" % (g, p, avg_nsec_str, avg_msec_str, avg_sec_str, cur_time, cur_count, cur_count/(total_sec_last))
			
	print "========================================================================================================================================================="



def probe__perf_break_point(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	common_callchain, __probe_ip, group_number, point_number, perf_sample_dict):

		# common header
		# print_header(event_name, common_cpu, common_secs, common_nsecs,
		# 	common_pid, common_comm)

		# print "__probe_ip=%u, group_number=%d, point_number=%d" % \
		# (__probe_ip, group_number, point_number)

		# meta date maintenance
		if group_number not in group_list:
			group_list.append(group_number)
			point_list[group_number] = []

		if point_number not in point_list[group_number]:
			point_list[group_number].append(point_number)

		# real work
		cur_timestamp = nsecs(common_secs, common_nsecs)

		global first_timestamp
		global last_timestamp
		if first_timestamp < 0 or cur_timestamp < first_timestamp:
			first_timestamp = cur_timestamp
		if cur_timestamp > last_timestamp:
			last_timestamp = cur_timestamp

		if point_number != 0:
			prev_timestamp = get_from_dict(prev_timestamp_dict, group_number)
			if prev_timestamp < 0 or prev_timestamp >= cur_timestamp:
				print "err in g: %d, p: %d, prev: %d, cur: %d" % (group_number, point_number, prev_timestamp, cur_timestamp)
			else:
				add_to_dict(time_total_dict, cur_timestamp-prev_timestamp, group_number, point_number)
				add_to_dict(count_total_dict, 1, group_number, point_number)
		else:
			add_to_dict(count_total_dict, 1, group_number, point_number)


		set_in_dict(prev_timestamp_dict, cur_timestamp, group_number)
		
		# print "\n"


# probe__perf_break_point     0 00160.887314662     3297 sleep                 __probe_ip=18446744071581010946, group_number=0, point_number=4
# Sample: {cpu=0, ip=18446744071581010947, period=1, pid=3297, tid=3297, time=160887314662, values=[(0L, 0L)]}
def probe__perf_break_point_ori(event_name, context, common_cpu,
	common_secs, common_nsecs, common_pid, common_comm,
	common_callchain, __probe_ip, group_number, point_number, perf_sample_dict):
		print_header(event_name, common_cpu, common_secs, common_nsecs,
			common_pid, common_comm)

		print "__probe_ip=%u, group_number=%d, point_number=%d" % \
		(__probe_ip, group_number, point_number)

		print 'Sample: {'+get_dict_as_string(perf_sample_dict['sample'], ', ')+'}'

		for node in common_callchain:
			if 'sym' in node:
				print "\t[%x] %s" % (node['ip'], node['sym']['name'])
			else:
				print "	[%x]" % (node['ip'])

		print "\n"

def trace_unhandled(event_name, context, event_fields_dict, perf_sample_dict):
		print get_dict_as_string(event_fields_dict)
		print 'Sample: {'+get_dict_as_string(perf_sample_dict['sample'], ', ')+'}'

def print_header(event_name, cpu, secs, nsecs, pid, comm):
	print "%-20s %5u %05u.%09u %8u %-20s " % \
	(event_name, cpu, secs, nsecs, pid, comm),

def get_dict_as_string(a_dict, delimiter=' '):
	return delimiter.join(['%s=%s'%(k,str(v))for k,v in sorted(a_dict.items())])
