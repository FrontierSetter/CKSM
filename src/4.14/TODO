-------------------------------------------------------------------------------------
导致系统奔溃的原因在pksm.c/pksm_cmp_and_merge_page(struct page_slot *cur_page_slot):
    Thread 64 received signal SIGSEGV, Segmentation fault.
    [Switching to Thread 64]
    0xffffffff81219133 in pksm_cmp_and_merge_page (cur_page_slot=<optimized out>) at mm/ksm.c:1708
    1708                                    table_page_slot->invalid = true;
    (gdb)
    Continuing.
    KGDB only knows signal 9 (pass) and 15 (pass and disconnect)
    Executing a continue without signal passing

    Thread 64 received signal SIGSEGV, Segmentation fault.
    0x000000000000000b in irq_stack_union ()
    (gdb) bt
    #0  0x000000000000000b in irq_stack_union ()
    #1  0xffff88023299d800 in ?? ()
    #2  0xffff88023299d800 in ?? ()
    #3  0xffff88023299d800 in ?? ()
    #4  0xffff8802330d8000 in ?? ()
    #5  0xffffea00051052dc in ?? ()
    #6  0xffff88021fd0d9d8 in ?? ()
    #7  0xffffea00041be740 in ?? ()
    #8  0xffff88021fd0d8d0 in ?? ()
    #9  0xffffea00041be740 in ?? ()
    #10 0xffff880222388438 in ?? ()
    #11 0x4751d3ef3469c000 in ?? ()
    #12 0xffffc9004751d3ef in ?? ()
    #13 0xffff88023299d800 in ?? ()
    #14 0xffffffff810c8520 in ?? () at kernel/sched/wait.c:387
    #15 0xffffc90000627ec0 in ?? ()
    #16 0xffffc90000627ec0 in ?? ()
    #17 0xd66102e689f07a00 in ?? ()
    #18 0xffff8802328888a0 in ?? ()
    #19 0xffff880232f78c80 in ?? ()
    #20 0xffffc9000000fdb8 in ?? ()
    #21 0x0000000000000000 in ?? ()

推测可能是table_page_slot指针所指向的page_slot此时已经被释放，导致写越界：
    这条路径是在unstable_table中找到相同页面后进行归并（cur_page -> pksm_page，table_page与之归并）
    在pksm_try_to_merge_two_pages->try_to_merge_with_pksm_page->remove_node_from_hashlist中会将table_slot的page_item置为NULL
    此时若pksm_exit被调用会进入easy_tree路径直接释放

    如果时释放虚拟页导致的->在设置null之前，原则上应该已经完成归并，不会再对这个page调用exit（page释放->引用数量减一->操作在pksm_page上）
        在归并完成之前就已经进行了释放，此时还没有进行ptr的转移
    如果时重定向ptr本身导致的->在归并过程中触发，原则上此时应该还没有NULL，但是不排除操作延迟（因为锁争用）

    这个问题在cmp_and_merge过程的最开始也有可能出现

SLOVED
    针对每次cmp_and_merge过程，使用remove_node_not_null，将item置为slot而非null
    判断时，exit仍只处理null的情况（强离开），其他情况全部使用page_slot_not_in_hash_table判断（null || slot，弱离开）
    针对unstable_merge的情况，在merge_with_pksm的过程中不置为NULL，而是merge完成后，unvalid置位完成后再设为null
    merge_with_pksm函数也存在于stable_merge的路径中，但是此时是cur_page向pksm_page merge，而cur_page的item再cmp_and_merge一开始就已经离开

-------------------------------------------------------------------------------------
记录page->page_slot映射的哈希表只增不减

有减，hash_del
new_anon中fake wrong

SLOVED
    在new_anon中加入slot->invalid是否等于true的判断

-------------------------------------------------------------------------------------
exit中要求当前slot不等于scan_slot，为何

-------------------------------------------------------------------------------------
pksm_cmp_and_merge_page -> try_to_merge_with_pksm_page -> pksm_try_to_merge_one_page
路径中经常会发生归并失败，且被归并的pksm_page往往是同一个，且之后的数次归并尝试也都会失败

因为try_to_merge_with_pksm_page同时也出现在unstable_merge的情况下，为了防止记录的混淆，暂用单独的函数try_to_merge_with_pksm_page_stable

try_to_merge_with_pksm_page_stable->pksm_try_to_merge_one_page_stable->try_to_merge_one_page_stable->write_protect_page_stable

全局变量中使用error_kpage记录问题页面
再cmp_and_merge以及之后的路径中加入printk打印

DELAY
    发现问题出现在：try_to_merge_one_page_stable -> write_protect_page_stable -> page_vma_mapped_walk 中（见log-5-4-1）
    这里的操作对象是普通的page（原始状态，没有经过任何处理），同时这里不涉及PKSM相关的操作
    因此不是PKSM的问题，而且其影响并不显著（只有那几个页面会发生这种情况），所以暂时搁置

-------------------------------------------------------------------------------------
try_to_merge_two_pages中set与merge过程都可能会失败

DELAY
    与上个问题一样，发生在write_protect过程中（但是没有进一步深入探究）

-------------------------------------------------------------------------------------
发现在ksm过程中会使用rmap_item记录anon_vma，并调用get_anon_vma进行记录防止释放
但是pksm过程忽略了这个，可能导致问题

SLOVED
    所以在merge_one过程中增加get，在remove_from_hlist过程中增加put
        因为remove过程中存在rmap_item必然意味着其在stable中，所以无所谓
        同时remove是移出的唯一路径，所以足够

-------------------------------------------------------------------------------------
remove过程中可能存在sharing的计数泄漏问题

SLOVED
    没有问题

-------------------------------------------------------------------------------------
stable table insert 的过程中有没有可能出错

-------------------------------------------------------------------------------------
pksm_do_scan最后调用put_page释放当前的页面，但是会进入mm子系统，并回过头来重新获得该page相关的信息，但这个信息此事时已经知道的，可以加速
但是不同的perf event有不同的表现，怪

-------------------------------------------------------------------------------------
stable中的get和put
