global total_time
global scan_time
global hash_time, partial_hash_time, stable_search_time, unstable_search_time
global zero_merge_time, pksm_merge_time, pksm_set_time
// global zero_merge_normap_time

global map_count_normal, map_count_zero
global pksm_map_count_normal, pksm_map_count_zero

probe begin{
  log("hello world")
}

probe end{
  printf("total_time: sum = %d, cnt = %d, avg = %d\n", @sum(total_time), @count(total_time), @avg(total_time))
  
  printf("scan_time: sum = %d, cnt = %d, avg = %d\n", @sum(scan_time), @count(scan_time), @avg(scan_time))

  printf("hash_time: sum = %d, cnt = %d, avg = %d\n", @sum(hash_time), @count(hash_time), @avg(hash_time))
  printf("partial_hash_time: sum = %d, cnt = %d, avg = %d\n", @sum(partial_hash_time), @count(partial_hash_time), @avg(partial_hash_time))
  printf("stable_search_time: sum = %d, cnt = %d, avg = %d\n", @sum(stable_search_time), @count(stable_search_time), @avg(stable_search_time))
  printf("unstable_search_time: sum = %d, cnt = %d, avg = %d\n", @sum(unstable_search_time), @count(unstable_search_time), @avg(unstable_search_time))
  
  printf("zero_merge_time: sum = %d, cnt = %d, avg = %d\n", @sum(zero_merge_time), @count(zero_merge_time), @avg(zero_merge_time))
  printf("pksm_merge_time: sum = %d, cnt = %d, avg = %d\n", @sum(pksm_merge_time), @count(pksm_merge_time), @avg(pksm_merge_time))
  printf("pksm_set_time: sum = %d, cnt = %d, avg = %d\n", @sum(pksm_set_time), @count(pksm_set_time), @avg(pksm_set_time))
  // printf("zero_merge_normap_time: sum = %d, cnt = %d, avg = %d\n", @sum(zero_merge_normap_time), @count(zero_merge_normap_time), @avg(zero_merge_normap_time))

  printf("map_count_normal: sum = %d, cnt = %d, avg = %d\n", @sum(map_count_normal), @count(map_count_normal), @avg(map_count_normal))
  printf("map_count_zero: sum = %d, cnt = %d, avg = %d\n", @sum(map_count_zero), @count(map_count_zero), @avg(map_count_zero))

  printf("pksm_map_count_normal: sum = %d, cnt = %d, avg = %d\n", @sum(pksm_map_count_normal), @count(pksm_map_count_normal), @avg(pksm_map_count_normal))
  printf("pksm_map_count_zero: sum = %d, cnt = %d, avg = %d\n", @sum(pksm_map_count_zero), @count(pksm_map_count_zero), @avg(pksm_map_count_zero))
  printf("============ map_count_normal =============\n")
  // print(@hist_log(map_count_normal))
  print(@hist_linear(map_count_normal, 0, 32, 1))

  printf("\n============ map_count_zero =============\n")
  // print(@hist_log(map_count_zero))
  print(@hist_linear(map_count_zero, 0, 32, 1))

  printf("============ pksm_map_count_normal =============\n")
  // print(@hist_log(map_count_normal))
  print(@hist_log(pksm_map_count_normal))

  printf("\n============ pksm_map_count_zero =============\n")
  // print(@hist_log(map_count_zero))
  print(@hist_log(pksm_map_count_zero))

}

# total
probe kernel.function("pksm_do_scan@mm/ksm.c").return {
  total_time <<< gettimeofday_us() - @entry(gettimeofday_us())
}

# scan
probe kernel.function("scan_get_next_page_slot@mm/ksm.c").return {
  # TODO: 返回NULL的scan，计入时间，但不计入cnt
  scan_time <<< gettimeofday_us() - @entry(gettimeofday_us())
}

# cmp
probe kernel.function("calc_hash@mm/ksm.c").return {
  hash_time <<< gettimeofday_us() - @entry(gettimeofday_us())
}

probe kernel.function("calc_partial_hash@mm/ksm.c").return {
  partial_hash_time <<< gettimeofday_us() - @entry(gettimeofday_us())
}

probe kernel.function("stable_hash_search@mm/ksm.c").return {
  stable_search_time <<< gettimeofday_us() - @entry(gettimeofday_us())
}

probe kernel.function("unstable_hash_search_insert@mm/ksm.c").return {
  unstable_search_time <<< gettimeofday_us() - @entry(gettimeofday_us())
}

# merge
probe kernel.function("pksm_try_to_merge_zero_page@mm/ksm.c").return {
  zero_merge_time <<< gettimeofday_us() - @entry(gettimeofday_us())
}

// probe kernel.function("try_to_merge_zero_page@mm/ksm.c").return {
//   zero_merge_normap_time <<< gettimeofday_us() - @entry(gettimeofday_us())
// }

probe kernel.function("try_to_merge_with_pksm_page@mm/ksm.c").return {
  pksm_merge_time <<< gettimeofday_us() - @entry(gettimeofday_us())
}

probe kernel.function("try_to_set_this_pksm_page@mm/ksm.c").return {
  pksm_set_time <<< gettimeofday_us() - @entry(gettimeofday_us())
}

# map_count
probe kernel.function("try_to_merge_with_pksm_page@mm/ksm.c") {
  pksm_map_count_normal <<< $kpage->_mapcount->counter
  map_count_normal <<< $page->_mapcount->counter
}

probe kernel.function("pksm_try_to_merge_zero_page@mm/ksm.c") {
  pksm_map_count_zero <<< @var("empty_pksm_zero_page@mm/memory.c")->_mapcount->counter
  map_count_zero <<< $page->_mapcount->counter
}

// probe timer.s(10) {
//   printf("total_time: sum = %d, cnt = %d\n", @sum(total_time), @count(total_time))
  
//   printf("scan_time: sum = %d, cnt = %d\n", @sum(scan_time), @count(scan_time))

//   printf("hash_time: sum = %d, cnt = %d\n", @sum(hash_time), @count(hash_time))
//   printf("stable_search_time: sum = %d, cnt = %d\n", @sum(stable_search_time), @count(stable_search_time))
//   printf("unstable_search_time: sum = %d, cnt = %d\n", @sum(unstable_search_time), @count(unstable_search_time))
  
//   printf("zero_merge_time: sum = %d, cnt = %d\n", @sum(zero_merge_time), @count(zero_merge_time))
//   printf("pksm_merge_time: sum = %d, cnt = %d\n", @sum(pksm_merge_time), @count(pksm_merge_time))
//   printf("pksm_set_time: sum = %d, cnt = %d\n", @sum(pksm_set_time), @count(pksm_set_time))
// }
